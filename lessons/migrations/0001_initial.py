# Generated by Django 4.1.3 on 2022-12-07 21:16

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import lessons.helpers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0014_alter_user_email'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('A', 'Administrator'), ('D', 'Director'), ('S', 'Student')], max_length=1)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('username', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='user name or email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True)),
                ('lesson_num', models.IntegerField()),
                ('lesson_price', models.FloatField()),
                ('interval', models.IntegerField()),
                ('duration', models.IntegerField()),
                ('description', models.CharField(max_length=500, null=True)),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.IntegerField()),
                ('staff_id', models.IntegerField()),
                ('amount', models.FloatField()),
                ('payment_date', models.DateTimeField()),
                ('payment_type', models.IntegerField()),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Sys_authority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=20, null=True, verbose_name='Role Name')),
                ('alias', models.CharField(max_length=20, null=True, verbose_name='Role Alias')),
                ('sort', models.IntegerField(default=0, verbose_name='sort')),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Sys_user_authority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('authority_id', models.IntegerField()),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_number', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=50, null=True)),
                ('email', models.CharField(max_length=30, null=True)),
                ('nick_name', models.CharField(max_length=20, null=True)),
                ('special', models.CharField(max_length=10, null=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('start_of_term_date', models.DateField(default=django.utils.timezone.now)),
                ('end_of_term_date', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sys_user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=20, null=True)),
                ('password', models.CharField(max_length=20, null=True)),
                ('salt', models.CharField(max_length=50, null=True)),
                ('name', models.CharField(max_length=50, null=True)),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('reference_number', models.CharField(default='7879', editable=False, max_length=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nick_name', models.CharField(max_length=500, null=True)),
                ('age', models.IntegerField()),
                ('icon_url', models.CharField(max_length=500, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LessonRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_status', models.CharField(choices=[('P', 'Pending'), ('R', 'Rejected'), ('A', 'Accepted'), ('O', 'Old')], default='P', max_length=1)),
                ('lesson_time', models.TimeField()),
                ('lesson_interval', models.IntegerField(choices=[(1, '1 lesson every week'), (2, '1 lesson every 2 weeks')], default=1)),
                ('lesson_duration', models.IntegerField(choices=[(1, '30 minutes'), (2, '45 minutes'), (3, '60 minutes')], default=1)),
                ('number_of_lessons', models.IntegerField(validators=[lessons.helpers.validateLessonNumber])),
                ('lesson_type', models.CharField(max_length=50, null=True)),
                ('lesson_start_date', models.DateField(default=django.utils.timezone.now, null=True)),
                ('date_created', models.DateField(default=django.utils.timezone.now)),
                ('remarks', models.CharField(max_length=500, null=True)),
                ('lesson_day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday')])),
                ('lesson_teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Teaching', to='lessons.teacher')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request', to='lessons.student')),
            ],
        ),
        migrations.CreateModel(
            name='LessonBooking',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('teacher_id', models.IntegerField(default=1)),
                ('lesson_time', models.TimeField()),
                ('finish_time', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson_start_date', models.DateField(validators=[lessons.helpers.validateDate])),
                ('lesson_end_date', models.DateField(validators=[lessons.helpers.validateDate])),
                ('lesson_duration', models.IntegerField(choices=[(3, 60), (1, 30), (2, 45)], default=1)),
                ('lesson_interval', models.IntegerField(choices=[(1, '1 lesson every week'), (2, '1 lesson every 2 weeks')], default=1)),
                ('lesson_type', models.CharField(max_length=50, null=True)),
                ('number_of_lessons', models.IntegerField(validators=[lessons.helpers.validateLessonNumber])),
                ('lesson_day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday')])),
                ('lesson_teacher', models.CharField(default='', max_length=20)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LessonBookings', to='lessons.lessonrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
